name: Python Face Registration & Recognition Test CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        python: ["3.11", "3.12"]

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Check initial disk space
        run: |
          echo "=== Initial disk usage ==="
          df -h
          echo "=== Largest directories ==="
          du -h -d 1 / 2>/dev/null | sort -rh | head -20 || true

      - name: Aggressive initial cleanup
        run: |
          # Stop services we don't need
          sudo systemctl stop snapd.service || true
          sudo systemctl stop snapd.socket || true
          sudo systemctl stop snapd.seeded.service || true
          
          # Remove snap completely
          sudo apt autoremove --purge snapd -y || true
          sudo rm -rf /snap /var/snap /var/lib/snapd /var/cache/snapd /usr/lib/snapd || true
          
          # Remove large unnecessary directories
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/lib/jvm
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /usr/share/gradle-*
          sudo rm -rf /usr/share/az_*
          sudo rm -rf /opt/microsoft
          sudo rm -rf /opt/pipx
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/share/miniconda
          sudo rm -rf /usr/local/graalvm
          sudo rm -rf /usr/local/aws-cli
          sudo rm -rf /usr/local/julia*
          sudo rm -rf /opt/az
          sudo rm -rf /usr/share/kotlinc
          sudo rm -rf /usr/share/sbt
          
          # Remove swap to free up space
          sudo swapoff -a || true
          sudo rm -f /swapfile || true
          
          # Clean package caches
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          yarn cache clean 2>/dev/null || true
          npm cache clean --force 2>/dev/null || true
          
          # Remove unnecessary packages
          sudo apt-get purge -y \
            azure-cli google-cloud-sdk google-chrome-stable firefox \
            dotnet-* powershell mono-* libmono-* \
            php* mysql-* postgresql-* mongodb-* \
            apache2 nginx \
            ansible aws-cli kubectl helm terraform \
            mercurial subversion \
            imagemagick* librsvg2* \
            gcc-9 g++-9 gcc-10 g++-10 gcc-11 g++-11 \
            clang-* llvm-* \
            *-icon-theme plymouth* \
            || true
          
          sudo apt-get autoremove -y || true
          sudo apt-get autoclean -y || true

      - name: Docker cleanup before build
        run: |
          docker system prune -a --volumes -f || true
          docker builder prune -a -f || true
          
      - name: Check disk space after cleanup
        run: |
          echo "=== Disk usage after cleanup ==="
          df -h

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Remove git history to save space
        run: |
          rm -rf .git

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/2.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create .env file
        working-directory: face_reg_recog_milvus
        run: |
          cat > .env << EOF
          DOWNLOAD_CACHE_PATH=app/.data
          DOWNLOAD_IMAGE_PATH=volumes/person_images
          API_SERVER_PORT=8080
          MILVUS_HOST=standalone
          MILVUS_PORT=19530
          ATTU_PORT=3000
          MYSQL_HOST=mysql
          MYSQL_PORT=3306
          MYSQL_USER=user
          MYSQL_PASSWORD=pass
          MYSQL_DATABASE=default
          MYSQL_PERSON_TABLE=person
          MYSQL_ROOT_PASSWORD=admin
          PMA_GUI_PORT=8001
          PMA_HOST=mysql
          PMA_PORT=3306
          PMA_USER=user
          PMA_PASSWORD=pass
          REDIS_HOST=redis-server
          REDIS_PORT=6379
          EOF

      - name: Add hosts to /etc/hosts
        run: |
          echo "127.0.0.1  standalone" | sudo tee -a /etc/hosts
          echo "127.0.0.1  mysql" | sudo tee -a /etc/hosts
          echo "127.0.0.1  redis-server" | sudo tee -a /etc/hosts

      - name: Download and extract models efficiently
        working-directory: face_reg_recog_milvus
        run: |
          # Create a minimal Python container just for downloading
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            python:3.11-slim bash -c "
              pip install --no-cache-dir gdown && \
              gdown 1PTZrQwo_tv34J8fAZ6em1DEr1ymFLPvg && \
              unzip -o models.zip -d app/triton_server && \
              rm -f models.zip && \
              echo 'Models extracted successfully'
            "
          
          # Verify models are present
          ls -la app/triton_server/models

      - name: Build Docker services with optimization
        working-directory: face_reg_recog_milvus
        run: |
          # Build with buildkit for better caching and smaller layers
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1
          
          # Build the main service
          docker compose build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --parallel
          
          # Immediately clean up build cache
          docker builder prune -f
          docker image prune -f

      - name: Check disk space after build
        run: |
          echo "=== Disk usage after build ==="
          df -h
          echo "=== Docker space usage ==="
          docker system df

      - name: Start essential services only
        working-directory: face_reg_recog_milvus
        run: |
          mkdir -p volumes/person_images
          
          # Start only essential services first
          docker compose up -d mysql redis-server
          
          # Wait for database services
          sleep 15
          
          # Start Milvus components
          docker compose up -d etcd minio standalone
          
          # Wait for Milvus
          sleep 20
          
          # Start optional services if needed
          docker compose up -d attu mysql-admin
          
          # Start triton server
          docker run -d --rm \
            --network face_recog_milvus \
            --name uvicorn_trt_server_cont \
            -p 8081:8081 \
            face_reg_recog_milvus-uvicorn_trt_server:latest \
            tritonserver --model-store app/triton_server/models --allow-grpc=true --allow-http=false --grpc-port=8081

      - name: Install Python dependencies in container
        working-directory: face_reg_recog_milvus
        run: |
          # Create a requirements file for testing
          cat requirements.txt tests/requirements.txt > combined_requirements.txt

      - name: Run PyTest in Docker
        working-directory: face_reg_recog_milvus
        run: |
          docker run --rm \
            --network face_recog_milvus \
            -v $(pwd):/app \
            -e MILVUS_HOST=standalone \
            -e MYSQL_HOST=mysql \
            -e REDIS_HOST=redis-server \
            -e MYSQL_CUR_TABLE=test \
            python:3.11-slim bash -c "
              cd /app && \
              apt-get update && apt-get install -y gcc python3-dev && \
              pip install --no-cache-dir -r requirements.txt && \
              pip install --no-cache-dir -r tests/requirements.txt && \
              rm -rf /root/.cache/pip && \
              apt-get clean && \
              rm -rf /var/lib/apt/lists/* && \
              pytest tests -v --tb=short
            "

      - name: Cleanup after tests
        if: always()
        working-directory: face_reg_recog_milvus
        run: |
          # Stop all services
          docker compose down -v || true
          
          # Stop triton server
          docker stop uvicorn_trt_server_cont || true
          
          # Remove all containers
          docker container prune -f
          
          # Remove all images created during this run
          docker image prune -a -f
          
          # Clean everything
          docker system prune -a --volumes -f
          
          # Clean build cache
          docker builder prune -a -f

      - name: Final disk space check
        if: always()
        run: |
          echo "=== Final disk usage ==="
          df -h
          echo "=== Docker space usage ==="
          docker system df || true

      - name: Emergency cleanup on failure
        if: failure()
        run: |
          # If we're still running out of space, do emergency cleanup
          sudo rm -rf face_reg_recog_milvus/app/triton_server/models || true
          docker system prune -a --volumes -f || true
          sudo apt-get clean || true
          sudo rm -rf /tmp/* || true